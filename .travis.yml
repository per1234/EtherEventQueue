# This file is used to configure the Travis CI tests of this library

env:
  global:
    # The Arduino IDE will be installed at APPLICATION_FOLDER/arduino
    - APPLICATION_FOLDER="${HOME}/arduino-ide"
    - SKETCHBOOK_FOLDER="${HOME}/arduino-sketchbook"


matrix:
  include:
  - name: "Formatting checks"
    language: minimal
    # Define empty phases to override the default definitions
    before_install:
    install:

    script:
      # Check for files starting with a blank line
      - find . -path './.git' -prune -or -type f -print0 | xargs -0 -L1 bash -c 'head -1 "$0" | grep --binary-files=without-match --regexp="^$"; if [[ "$?" == "0" ]]; then echo "Blank line found at start of $0."; false; fi'
      # Check for debug output left on
      - find . -path './.git' -prune -or \( \( -name '*.ino' -or -name '*.cpp' -or -name '*.c' -or -name '*.tpp' -or -name '*.ipp' -or -name '*.hpp' -or -name '*.hh' -or -name '*.h' \) -and -type f \) -exec grep --with-filename --line-number --binary-files=without-match --regexp='# *define .*DEBUG  *true' '{}' \; -exec echo 'Debug output left on.' \; -exec false '{}' +
      # Check for tabs
      - find . -path './.git' -prune -or \( -not -name 'keywords.txt' -and -type f \) -exec grep --with-filename --line-number --binary-files=without-match --regexp=$'\t' '{}' \; -exec echo 'Tab found.' \; -exec false '{}' +
      # Check for trailing whitespace
      - find . -path './.git' -prune -or -type f -exec grep --with-filename --line-number --binary-files=without-match --regexp='[[:blank:]]$' '{}' \; -exec echo 'Trailing whitespace found.' \; -exec false '{}' +
      # Check for non-Unix line endings
      - find . -path './.git' -prune -or -type f -exec grep --files-with-matches --binary-files=without-match --regexp=$'\r$' '{}' \; -exec echo 'Non-Unix EOL detected.' \; -exec false '{}' +
      # Check for blank lines at end of files
      - find . -path './.git' -prune -or -type f -print0 | xargs -0 -L1 bash -c 'tail -1 "$0" | grep --binary-files=without-match --regexp="^$"; if [[ "$?" == "0" ]]; then echo "Blank line found at end of $0."; false; fi'
      # Check for files that don't end in a newline (https://stackoverflow.com/a/25686825)
      - find . -path './.git' -prune -or -type f -print0 | xargs -0 -L1 bash -c 'if test "$(grep --files-with-matches --binary-files=without-match --max-count=1 --regexp='.*' "$0")" && test "$(tail --bytes=1 "$0")"; then echo "No new line at end of $0."; false; fi'


  - name: "Spell check"
    language: python
    python: 3.6
    # Define an empty before_install phase to override the default definition
    before_install:
    install:
      # https://github.com/codespell-project/codespell
      - pip install codespell
    script:
      - codespell --skip="${TRAVIS_BUILD_DIR}/.git" "${TRAVIS_BUILD_DIR}"


  - name: "AVR compilation tests"
    language: minimal
    env: BOARD_NAME='arduino:avr:mega:cpu=atmega2560' PACKAGE_NAME='arduino:avr' PACKAGE_URL='' IDE_VERSIONS='("1.6.5-r5" "1.6.9" "1.6.13" "1.8.0" "newest")'
    script:
      # Compile all example and test sketches
      - build_sketch "${SKETCHBOOK_FOLDER}/libraries/EtherEventQueue/examples" "$BOARD_NAME" "false" "oldest" "newest"
      - build_sketch "${SKETCHBOOK_FOLDER}/libraries/EtherEventQueue/extras/tests" "$BOARD_NAME" "false" "oldest" "newest"


  - name: "SAM compilation tests"
    language: minimal
    env: BOARD_NAME='arduino:sam:arduino_due_x_dbg' PACKAGE_NAME='arduino:sam' PACKAGE_URL='' IDE_VERSIONS='newest'
    script:
      # Compile all example and test sketches
      - build_sketch "${SKETCHBOOK_FOLDER}/libraries/EtherEventQueue/examples" "$BOARD_NAME" "false" "oldest" "newest"
      - build_sketch "${SKETCHBOOK_FOLDER}/libraries/EtherEventQueue/extras/tests" "$BOARD_NAME" "false" "oldest" "newest"


  - name: "SAMD compilation tests"
    language: minimal
    env: BOARD_NAME='arduino:samd:arduino_zero_edbg' PACKAGE_NAME='arduino:samd' PACKAGE_URL='' IDE_VERSIONS='newest'


  - name: "ARC32 compilation tests"
    language: minimal
    env: BOARD_NAME='Intel:arc32:arduino_101' PACKAGE_NAME='Intel:arc32' PACKAGE_URL='' IDE_VERSIONS='newest'


  - name: "i586 compilation tests"
    language: minimal
    env: BOARD_NAME='Intel:i586:izmir_fg' PACKAGE_NAME='Intel:i586' PACKAGE_URL='' IDE_VERSIONS='newest'


  - name: "i686 compilation tests"
    language: minimal
    env: BOARD_NAME='Intel:i686:izmir_ec' PACKAGE_NAME='Intel:i686' PACKAGE_URL='' IDE_VERSIONS='newest'


  - name: "ESP8266 compilation tests"
    language: minimal
    env: BOARD_NAME='esp8266:esp8266:d1_mini:CpuFrequency=80,UploadSpeed=921600,FlashSize=4M3M' PACKAGE_NAME='esp8266:esp8266' PACKAGE_URL='http://arduino.esp8266.com/stable/package_esp8266com_index.json' IDE_VERSIONS='newest'


# default phase definitions
before_install:
  - git clone https://github.com/per1234/arduino-ci-script.git "${HOME}/scripts/arduino-ci-script"
  - cd "${HOME}/scripts/arduino-ci-script"
  # Get new tags from the remote
  - git fetch --tags
  # Checkout the latest tag
  - git checkout $(git describe --tags `git rev-list --tags --max-count=1`)
  - source "${HOME}/scripts/arduino-ci-script/arduino-ci-script.sh"

  # These functions can be used to get verbose output for debugging the script
  # set_script_verbosity can be set to values from 0 - 2 (verbosity off - maximum verbosity)
  #- set_script_verbosity 1
  # Setting set_verbose_output_during_compilation to true is the same as File > Preferences > Show verbose output during > compilation (check) in the Arduino IDE
  #- set_verbose_output_during_compilation "true"

  # Check for library issues that don't affect compilation
  - set_library_testing 'true'

  - set_application_folder "$APPLICATION_FOLDER"
  - set_sketchbook_folder "$SKETCHBOOK_FOLDER"

  - install_ide "$IDE_VERSIONS"


install:
  # Install hardware packages
  # install_package fails if the most recent version of $PACKAGE_NAME is already installed, which would cause the build for Mega 2560 to fail if the newest installed IDE version doesn't have an up-to-date AVR Boards version.
  - if [ "$PACKAGE_NAME" != "arduino:avr" ]; then install_package "$PACKAGE_NAME" "$PACKAGE_URL"; fi

  # Install the library from the repository
  - install_library

  - install_library "https://github.com/per1234/EtherEvent.git" "development"
  - install_library 'https://github.com/tzikis/ArduinoMD5/archive/master.zip'
  # Entropy library is not used for some jobs, but it's probably too much effort to avoid the unnecessary installations
  - install_library 'https://sites.google.com/site/astudyofentropy/file-cabinet/Entropy-v1.0.2.zip'


script:
  # Compile all of EtherEventQueue's examples, except Entropy, which is only compatible with specific boards
  - build_sketch "${SKETCHBOOK_FOLDER}/libraries/EtherEventQueue/examples/AdvancedUsage/AdvancedUsage.ino" "$BOARD_NAME" "false" "oldest" "newest"
  - build_sketch "${SKETCHBOOK_FOLDER}/libraries/EtherEventQueue/examples/BasicUsage/BasicUsage.ino" "$BOARD_NAME" "false" "oldest" "newest"
  - build_sketch "${SKETCHBOOK_FOLDER}/libraries/EtherEventQueue/examples/EventTypeConfirm/EventTypeConfirm.ino" "$BOARD_NAME" "false" "oldest" "newest"
  - build_sketch "${SKETCHBOOK_FOLDER}/libraries/EtherEventQueue/examples/Keepalive/Keepalive.ino" "$BOARD_NAME" "false" "oldest" "newest"
  - build_sketch "${SKETCHBOOK_FOLDER}/libraries/EtherEventQueue/examples/NoAuthentication/NoAuthentication.ino" "$BOARD_NAME" "false" "oldest" "newest"
  - build_sketch "${SKETCHBOOK_FOLDER}/libraries/EtherEventQueue/examples/Nodes/Nodes.ino" "$BOARD_NAME" "false" "oldest" "newest"
  # Compile all of EtherEventQueue's test sketches
  - build_sketch "${SKETCHBOOK_FOLDER}/libraries/EtherEventQueue/extras/tests" "$BOARD_NAME" "false" "oldest" "newest"


after_script:
  # Commit a report of the job results to the CI-reports repository
  - USER_NAME="$(echo "$TRAVIS_REPO_SLUG" | cut -d'/' -f 1)"
  - REPOSITORY_NAME="$(echo "$TRAVIS_REPO_SLUG" | cut -d'/' -f 2)"
  - publish_report_to_repository "$REPORT_GITHUB_TOKEN" "https://github.com/${USER_NAME}/CI-reports.git" "$REPOSITORY_NAME" "build_$(printf "%05d\n" "${TRAVIS_BUILD_NUMBER}")" "false"
  # Print a tab separated report of all sketch verification results to the log
  - display_report


notifications:
  email:
    on_success: always
    on_failure: always
  webhooks:
    urls:
      - https://www.travisbuddy.com/
    on_success: never
    on_failure: always
